{"compress":true,"commitItems":[["034fe9cd-714f-4554-99c2-2e3e4650e15c",1630380720342,"---\nlayout: 如何在PHP中解析Cron表达式\ntitle:   如何在PHP中解析Cron表达式\ndate: 2019-12-30 14:23:42\ncategories: \"PHP\"\nabbrlink: 001b\ntags: \n- PHP\n- PHP源码解析\n---\n\n<img src=\"https://shmily-album.oss-cn-shenzhen.aliyuncs.com/photo_album_4/8c507e495c06858d1ffa9e70e4e870e5.jpg\" style=\"width:900px;height:400px\" />\n\n# 导言\n我们平时开发过程中，很多种时候都会使用到`Cron表达式` 来储存一个时间计划，通过`Cron表达式` 我们可以实现定时器的功能，我们通常在开发过程中也需要将一个`Cron表达式` 解析成时间格式，小编通过在Github找到了基于PHP实现的`Cron解析包`，下面小编将会来教会大家如何使用这个解析包\n\n<!--less-->\n\n\n## cron表达式简介\n\n[Cron](http://en.wikipedia.org/wiki/Cron)利用_cron表达式_表示重复计划。Cron表达式由几个字段组成，每个字段代表时间的度量。cron表达式中的字段如下：分钟，小时，每月的某天，月份，一周的某天以及可选的年份。这是一个每分钟运行一次的cron表达式示例，该表达式下方是位置字段。\n\n```bash\n\n*    *    *    *    *    *\n-    -    -    -    -    -\n|    |    |    |    |    |\n|    |    |    |    |    + year [optional]\n|    |    |    |    +----- day of week (0 - 7) (Sunday=0 or 7)\n|    |    |    +---------- month (1 - 12)\n|    |    +--------------- day of month (1 - 31)\n|    +-------------------- hour (0 - 23)\n+------------------------- min (0 - 59)\n\n```\n\n有几个特殊字符可以修改cron表达式的计划，并且某些修饰符在不同字段中的行为也有所不同。您可以在[cron的Wikipedia页面](http://en.wikipedia.org/wiki/Cron#Special_characters)上找到所有可用特殊字符的列表。\n\n## 安装\n\n`Cron解析包`Github地址：\n>> https://github.com/dragonmantank/cron-expression>\n\n我们通过composer的方式来安装该包\n\n```bash\ncomposer require dragonmantank/cron-expression\n\n```\n\n如果你使用的是`Laravel框架的话`则无需安装此包，这是因为`Laravel`框架的已经引入该包\n\n\n## 使用方法\n\n```bash\n\nrequire_once '/vendor/autoload.php';\n\n$cronTab = '* * * * *';\n\n//实例化Cron对象\n$cron = \\Cron\\CronExpression::factory($cron);\n//根据Cron表达式计算出下次实行时间 返回一个DateTime对象\n$cron = $cron->getNextRunDate();\n//转换时间为指定格式\necho $cron->format('Y-m-d H:i:s');\n\n```\n\n通过上面的代码我们可以轻易的就根据`Cron表达式` 计算出下次执行时间，是不是很方便呢，当然，这个包提供的方法不仅仅只是单纯计算出下次执行时间，同样我们也可以计算出下X次执行时间\n \t\n``` php\n$cron = \\Cron\\CronExpression::factory($cron);\n\nforeach($cron->getMultipleRunDates(5) as $date){ \n  echo $date->format('Y-m-d H:i:s') . PHP_EOL; \n}\n```\n\n运行结果：\n\n```bash \n\nD:\\php7.3\\php.exe C:\\Users\\php\\Desktop\\local_test\\index.php\n2019-12-30 15:53:00\n2019-12-30 15:54:00\n2019-12-30 15:55:00\n2019-12-30 15:56:00\n2019-12-30 15:57:00\n\nProcess finished with exit code 0\n\n```\n\n同样我们可以获取上次的执行时间 以及上X次执行时间：\n\n```\n$cron = \\Cron\\CronExpression::factory($cron);\n$cron = $cron->getPreviousRunDate();\necho $cron->format('Y-m-d H:i:s');\n\n$cron = \\Cron\\CronExpression::factory($cron);\nforeach($cron->getMultipleRunDates(5, 'now', true ) as $date){ \n  echo $date->format('Y-m-d H:i:s') . PHP_EOL; \n}\n```\n我们还可以通过`isDue` 方法来查看cron表达式是否与特定日期匹配，同时该库也支持一些宏\n\n* `@yearly`，`@annually`-每年1月1日午夜运行一次-`0 0 1 1 *`\n* `@monthly` -每个月的第一天午夜运行一次- `0 0 1 * *`\n* `@weekly` -每周午夜在太阳上运行一次- `0 0 * * 0`\n* `@daily` -每天半夜运行一次- `0 0 * * *`\n* `@hourly` -第一分钟每小时运行一次- `0 * * * *`\n\n我们可以通过这些宏来快速计算出执行时间，例如下面这个例子可以快速计算出每天半夜执行一次的时间：\n\n``` php\n\n$cron = Cron\\CronExpression::factory('@daily');\necho $cron->getNextRunDate()->format('Y-m-d H:i:s');\n\n```\n\n## 参考文献\n\n1. <http://mtdowling.com/blog/2012/06/03/cron-expressions-in-php/>\n2. <https://github.com/mtdowling/cron-expression>\n\n",[[1630380719168,["Administrator@YMS-20200313EGD",[[-1,110,"01b"]],[113,113],[110,110]]],[1630380719970,["Administrator@YMS-20200313EGD",[[1,110,"11a"]],[110,110],[113,113]]]],null,"Administrator@YMS-20200313EGD"]]}