{"compress":true,"commitItems":[["b93b1858-c0a8-46c4-a6dd-31c2c617391a",1630380818862,"---\nlayout: 《工具篇》-- 使用supervisor来管理Linux的后台进程\ntitle:   《工具篇》-- 使用supervisor来管理Linux的后台进程\ndate: 2019-12-19 16:33\ncategories: \"Linux\"\nabbrlink: 031a\ntags: \n- Linux\n- 工具\n---\n\n<img src=\"http://images.linyiyuan.top/klahsudkihajhskdjhk45641564.jpg\" style=\"width:900px;height:400px\" />\n\n# 导言\n我们在日常开发过程中，我们服务器都会经常跑一些程序，而这些程序都是放在后台去运行，但是有些程序运行过程中可能会出现崩溃，或者提前退出等情况，所以我们需要有一个用于管理进程的工具，当进程中断或者奔溃的时候能自动重新启动它，`Supervisor` 就是这么一个用于管理进程的工具\n\n<!--less-->\n\n## Supervisor 介绍\n\n`Supervisor` 是一个进程管理工具，当进程中断的使用`Supervisor`能自动重新启动它，该工具使用`Python`语言开发，支持Linux/Unix系统，不支持Windows系统，它可以很方便的监听、启动、停止、重启一个或多个进程。\n\n## Supervisor 安装\n\n以下安装均在`Ubuntu16.04`系统下进行\n\n1.  安装 `Python`\n\n由于`Supervisor`是由`Python`语言开发，自然而然我们的系统就需要安装`Python`语言环境, 一般情况下`Ubuntu`都自带`Python`语言环境\n\n```bash\napt-get install python3.7\n```\n\n1.  安装`Supervisor`\n\n```bash\napt-get install supervisor\n```\n\n\n安装成功后 运行：\n```bash\nservices supervisor status\n```\n\n查看`supervisor` 运行状态\n\n## Supervisor 配置\n\n首先查看`Supervisor` 的主配置文件，一般文件位于`/etc/supervisor/`目录下\n\n```bash\nvim /etc/supervisor/supervisord.conf\n\n//文件内容\n; supervisor config file \n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\n\n; the below section must remain in the config file for RPC\n; (supervisorctl/web interface) to work, additional interfaces may be\n; added by defining them in separate rpcinterface: sections\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n\n; The [include] section can just contain the \"files\" setting.  This\n; setting can list multiple files (separated by whitespace or\n; newlines).  It can also contain wildcards.  The filenames are\n; interpreted as relative to this file.  Included files *cannot*\n; include files themselves.\n\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\n```\n\n从配置文件最后一行可以看出子配置文件位于`/etc/supervisor/conf.d/` 目录下，如果没有则新建相应目录即可，我们打开该目录下`conf.d`目录并新建一个文件 `test.conf`\n\n```bash\nvim test.conf\n```\n\n并写入以下内容：\n\n```bash\n[program:websocket]\ncommand= //需要被监听的进程路径\nautostart=true  //是否随着supervisord的启动而启动\nautorestart=unexpected //是否自动重启\nexitcodes=0 //正常退出代码\nstopsignal=KILL //用来杀死进程的信号\nuser=root //执行命令用户\nredirect_stderr=true //重定向stderr到stdout\nstdout_logfile= //日志路径\n```\n\n紧接着我们重启 `Supervisor` 服务\n\n```bash\nservice supervisor restart\n```\n\n`Supervisord`启动成功后，可以通过`Supervisorct`l客户端控制进程，启动、停止、重启。运行`supervisorctl`命令\n\n\n```bash\nsupervisorctl \ntest  RUNNING   pid 16350, uptime 1:20:44\nsupervisor> status\ntest  RUNNING   pid 16350, uptime 1:20:45\nsupervisor>\n```\n\n\n然后我们可以看到我们监听的进程`test`已经 在运行了，我们可以通过以下命令对其进行控制：\n\n```bash\nsupervisorctl restart <application name> ;重启指定应用\nsupervisorctl stop <application name> ;停止指定应用\nsupervisorctl start <application name> ;启动指定应用\nsupervisorctl restart all ;重启所有应用\nsupervisorctl stop all ;停止所有应用\nsupervisorctl start all ;启动所有应用\n```\n\n## [](http://www.linyiyuan.top/p/031a.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0 \"参考文章\")参考文章\n\n1.  [linux学习(四) – supervisor守护进程](https://www.cnblogs.com/redirect/p/6599489.html)\n2.  [Supervisor-守护进程工具](https://www.jianshu.com/p/39b476e808d8)\n",[[1630380817920,["Administrator@YMS-20200313EGD",[[-1,143,"31"]],[144,144],[143,143]]],[1630380818370,["Administrator@YMS-20200313EGD",[[1,143,"14"]],[143,143],[145,145]]]],null,"Administrator@YMS-20200313EGD"]]}